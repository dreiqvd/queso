@use 'breakpoints' as *;
@use '../themes/_palettes/base-palette' as base-palette;

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media only screen and #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  @else {
    @warn "Breakpoint `#{$breakpoint}` does not exist";
  }
}

@mixin apply-variables($theme) {
  $colors: map-get($theme, color);
  $primary: map-get($colors, primary);
  $accent: map-get($colors, accent);

  html {
    /* Colors */
    --color-primary: #{map-get($primary, 400)};
    --color-accent: #{map-get($accent, 400)};
    --color-red: #{map-get(base-palette.$red, 400)};
    --color-green: #{map-get(base-palette.$green, 400)};
    --color-gray: #{map-get(base-palette.$gray, 600)};

    // Primary Color: Uses the primary map from Material 3 Config
    @each $key, $value in $primary {
      @if $key !=contrast {
        --color-primary-#{$key}: #{$value};
      }
    }

    // Accent Color: Uses the tertiary map from Material 3 Config
    @each $key, $value in $accent {
      @if $key !=contrast {
        --color-accent-#{$key}: #{$value};
      }
    }

    @each $key, $value in base-palette.$gray {
      @if $key !=contrast {
        --color-gray-#{$key}: #{$value};
      }
    }

    // Semantic Colors
    @each $key, $value in base-palette.$red {
      @if $key !=contrast {
        --color-red-#{$key}: #{$value};
      }
    }

    @each $key, $value in base-palette.$green {
      @if $key !=contrast {
        --color-green-#{$key}: #{$value};
      }
    }

    /* Z-Indexes
      Note: It is intended that the values below are below 1000 since the Angular Material
      CDK Overlay container has a z-index of 1000. This prevents overriding the CDK Overlay
      whenever  we use these values across different components.
    */
    --z-fixed: 200;
  }
}
